#include <18F4550.h>
#device adc=8

#FUSES NOWDT                    //No Watch Dog Timer
#FUSES WDT128                   //Watch Dog Timer uses 1:128 Postscale
#FUSES HS                       //High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD)
#FUSES NOPROTECT                //Code not protected from reading
#FUSES NOBROWNOUT               //No brownout reset
#FUSES BORV20                   //Brownout reset at 2.0V
#FUSES NOPUT                    //No Power Up Timer
#FUSES NOCPD                    //No EE protection
#FUSES STVREN                   //Stack full/underflow will cause reset
#FUSES NODEBUG                  //No Debug mode for ICD
#FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O
#FUSES NOWRT                    //Program memory not write protected
#FUSES NOWRTD                   //Data EEPROM not write protected
#FUSES IESO                     //Internal External Switch Over mode enabled
#FUSES FCMEN                    //Fail-safe clock monitor enabled
#FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET
#FUSES NOWRTC                   //configuration not registers write protected
#FUSES NOWRTB                   //Boot block not write protected
#FUSES NOEBTR                   //Memory not protected from table reads
#FUSES NOEBTRB                  //Boot block not protected from table reads
#FUSES NOCPB                    //No Boot Block code protection
#FUSES MCLR                     //Master Clear pin enabled
#FUSES LPT1OSC                  //Timer1 configured for low-power operation
#FUSES NOXINST                  //Extended set extension and Indexed Addressing mode disabled (Legacy mode)
#FUSES PLL12                    //Divide By 12(48MHz oscillator input)
#FUSES CPUDIV1                  //System Clock by 4
#FUSES USBDIV                   //USB clock source comes from PLL divide by 2
#FUSES VREGEN                   //USB voltage regulator enabled
#FUSES ICPRT                    //ICPRT enabled

#use delay(clock=20000000)

#use rs232(baud=19200,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=5)

#use fast_io(B)

#define SENSOR1            0b11111100
#define SENSOR2            0b11111010
#define SENSOR3            0b11110110
#define SENSOR4            0b11101110
#define SENSOR6            0b11011110
#define SENSOR7            0b10111110
#define SENSOR8            0b01111110
#define NOSENSOR           0b11111111
#define SENSOR5            PIN_D0

#define SENSOR             PIN_B0

#define CHAVE_AP           PIN_D2
#define FREQ               130
#define RC50               FREQ/2
#define RELE               PIN_D1
#define LED_ARRANCADA      PIN_C4
#define LED_PERCURSO       PIN_C5
#define DELAY_PARTIDA       3000       //Tempo para sair do 1º Sensor (ms)
#define DELAY_CHEGADA       3000       //Tempo após o 2º Sensor (ms)


long int CtlPWM;
float TPercurso, Lomb, Volta1, Volta2;
float TS1,TS2,TS3,TS4,TS5,TS6,TS7,TS8,TS9,TS10,TS11,TS12;
short int FS1,FS5;
short int Pista, FlagSensor=0;
char RX;

#int_TIMER0
void  TIMER0_isr(void) 
{
   if(!CtlPWM)
   {
      set_pwm1_duty(0);
      CtlPWM = 1;
   }
   else
   {
      set_pwm1_duty(RC50);
      CtlPWM = 0;
   }
}

#int_TIMER1
void  TIMER1_isr(void) 
{
   if(TPercurso<3000.0) 
     TPercurso = TPercurso + 0.04243;
   if (FS1)
   {
      TS1 = TPercurso;
   }
   if (FS5)
   {
      TS5 = TPercurso;
   }   
}

#int_EXT
void  EXT_isr(void) 
{
   FlagSensor = 1;
}

#int_RDA
void  RDA_isr(void) 
{
     RX = getc();
     printf("%1d%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g%5.1g",Pista,TS1,TS2,TS3,Lomb,TS5,TS6,TS7,TS8,Volta1,TS10,TS11,TS12,Volta2);     
}

void PistaArrancada()
{
// ------ ESPERA PELA ATUAÇÃO SENSOR 1 >> PARTIDA <<------------
      do
      {
         output_B(SENSOR1);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 1
         {
            TPercurso = 0;
            set_timer1(0);
            enable_interrupts(INT_TIMER1);
            FS1 = 1;
         }
     }while(FlagSensor!=0);   
                           
// ------------ ESPERA PELA ATUAÇÃO SENSOR 2-----------------
      do
      {
         output_B(SENSOR2);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 2
         {
            TS2 = TPercurso;  
         }
      }while(FlagSensor!=0);

// ------------ ESPERA PELA ATUAÇÃO SENSOR 3-----------------
      do
      {
         output_B(SENSOR3);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 3
         {
            TS3 = TPercurso;
            Lomb = TS3 - TS2;
         }
      }while(FlagSensor!=0); 

// ------------ ESPERA PELA ATUAÇÃO SENSOR 4-----------------
      do
      {
         output_B(SENSOR4);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
      }while(FlagSensor!=0);

// ------------ FIM -----------------
}


void  PistaPercurso()
{
// ------ ESPERA PELA ATUAÇÃO SENSOR 5 >> PARTIDA <<------------
      do
      {
         output_B(NOSENSOR);
         output_low(SENSOR5);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 5
         {
            TPercurso = 0;
            set_timer1(0);
            enable_interrupts(INT_TIMER1);
            FS5 = 1;
         }
     }while(FlagSensor!=0);   
      output_high(SENSOR5);     
                           
// ------------ ESPERA PELA ATUAÇÃO SENSOR 6-----------------
      do
      {
         output_B(SENSOR6);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 6
         {
            TS6 = TPercurso;  
         }
      }while(FlagSensor!=0);

// ------------ ESPERA PELA ATUAÇÃO SENSOR 7-----------------
      do
      {
         output_B(SENSOR7);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 7
         {
            TS7 = TPercurso;
         }
      }while(FlagSensor!=0); 

// ------------ ESPERA PELA ATUAÇÃO SENSOR 8-----------------
      do
      {
         output_B(SENSOR8);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 8
         {
            TS8 = TPercurso;
         }   
      }while(FlagSensor!=0);

// ---- VOLTA -> ESPERA PELA ATUAÇÃO SENSOR 5 ----------------
      do
      {
         output_B(NOSENSOR);
         output_low(SENSOR5);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 8
         {
            Volta1 = TPercurso;
         }   
      }while(FlagSensor!=0);
      output_high(SENSOR5);           

// ---- VOLTA -> ESPERA PELA ATUAÇÃO SENSOR 8 ----------------
      do
      {
         output_B(SENSOR8);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 8
         {
            TS10 = TPercurso;
         }   
      }while(FlagSensor!=0);

// ---- VOLTA -> ESPERA PELA ATUAÇÃO SENSOR 7 ----------------
      do
      {
         output_B(SENSOR7);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 7
         {
            TS11 = TPercurso;
         }
      }while(FlagSensor!=0); 

// ---- VOLTA -> ESPERA PELA ATUAÇÃO SENSOR 6 ----------------
      do
      {
         output_B(SENSOR6);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 6
         {
            TS12 = TPercurso;  
         }
      }while(FlagSensor!=0);

// ---- VOLTA -> ESPERA PELA ATUAÇÃO SENSOR 5 ----------------

      do
      {
         output_B(NOSENSOR);
         output_low(SENSOR5);
         FlagSensor = 0;
         enable_interrupts(INT_EXT);
         delay_ms(3);         
         disable_interrupts(INT_EXT);
         if(FlagSensor==0) // Fica nesse loop até achar sensor 6
         {
            Volta2 = TPercurso - Volta1;  
         }
      }while(FlagSensor!=0);
      output_high(SENSOR5);                 

// ------------ FIM -----------------
}

void main()
{

   setup_adc_ports(NO_ANALOGS|VSS_VDD);
   setup_adc(ADC_CLOCK_DIV_2);   
   setup_spi(SPI_SS_DISABLED);
   setup_wdt(WDT_OFF);
   setup_timer_0(RTCC_8_BIT|RTCC_INTERNAL|RTCC_DIV_16);
   setup_timer_1(T1_INTERNAL|T1_DIV_BY_4);
   setup_timer_2(T2_DIV_BY_1,FREQ,1);
   setup_ccp1(CCP_PWM);
   setup_comparator(NC_NC_NC_NC);
   ext_int_edge(L_TO_H);
   set_pwm1_duty(264);

   set_tris_B(0x01);
   output_B(0xFF);

   enable_interrupts(GLOBAL);
   enable_interrupts(INT_RDA);
   enable_interrupts(INT_TIMER0);

   CtlPWM = 0;
   FlagSensor = 0;
   
   TS1 = 0;   TS2 = 0;   TS3 = 0;   TS4 = 0;
   TS5 = 0;   TS6 = 0;   TS7 = 0;   TS8 = 0;
   TS9 = 0;   TS10 = 0;   TS11 = 0;   TS12 = 0;   
   
   Lomb = 0; Volta1 = 0; Volta2 = 0;

   FS1 = 0;
   FS5 = 0;

   while(TRUE)
   {
      if (input(CHAVE_AP) == 0)
      {
        Pista = 0;
        PistaArrancada();
      }  
      else
      {
         Pista = 1;
         PistaPercurso();
      }   
      disable_interrupts(INT_TIMER1);
      while(TRUE);      
   }
}
